<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Coche simple, pide el servicio de los semaforos.</H3>
	Pide el servicio de estado de semaforos cada 10 segundos.
	
 -->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.2.xsd"
	name="CocheSimple"
	package="lights">

	<imports>
		<import>java.util.logging.*</import>
		<import>java.util.*</import>
		<import>jadex.bridge.fipa.*</import>
	</imports>

	<beliefs>
		<!-- Esta creencia determina el numero de segundos que han transcurrido. -->
        <belief name="segundosTrans" class="int">
            <fact>0</fact>
        </belief>
        
        <!-- Esta creencia determina el estado del semaforo. -->
        <belief name="estadoSemaforo" class="int">
            <fact>0</fact>
        </belief>
        
         <!-- Esta creencia determina el estado del semaforo vista Norte. -->
        <belief name="estadoSemaforoNorte" class="int">
            <fact>0</fact>
        </belief>
        
         <!-- Esta creencia determina el estado del semaforo vista Sur. -->
        <belief name="estadoSemaforoSur" class="int">
            <fact>0</fact>
        </belief>
        
          <!-- Esta creencia determina el estado del semaforo vista Este. -->
        <belief name="estadoSemaforoEste" class="int">
            <fact>0</fact>
        </belief>
        
          <!-- Esta creencia determina el estado del semaforo vista Oeste. -->
        <belief name="estadoSemaforoOeste" class="int">
            <fact>0</fact>
        </belief>
        
          <!-- Esta creencia determina si hay trafico en la linea que es tangente al semaforo. -->
        <belief name="traficoLineaNorte" class="int">
            <fact>0</fact>
        </belief>
        
           <!-- Esta creencia determina si hay trafico en la linea que es perpendicular al semaforo. -->
        <belief name="traficoLineaSur" class="int">
            <fact>0</fact>
        </belief>
        
        <belief name="traficoLineaEste" class="int">
            <fact>0</fact>
        </belief>
        
        <!-- Esta creencia determina si hay trafico en la linea que es perpendicular al semaforo. -->
        <belief name="traficoLineaOeste" class="int">
            <fact>0</fact>
        </belief>
        
         <!-- Esta creencia determina si norte(1), este(2), sur(3), oeste(4). -->
        <belief name="lineaActual" class="int">
            <fact>1</fact>
        </belief>
         <!-- Esta creencia determina posicion en x. -->
        <belief name="posX" class="int">
            <fact>0</fact>
        </belief>
        <!-- Esta creencia determina posicion en y. -->
        <belief name="posY" class="int">
            <fact>0</fact>
        </belief>
         <!-- Esta creencia determina posicion en y. -->
        <belief name="direccion" class="String">
            <fact>0</fact>
        </belief>
        
        <!-- Esta creencia ayuda a encontrar el tiempo  -->
        <belief name="tiempoDestino" class="int">
            <fact>0</fact>
        </belief>
        
        <!-- Esta creencia determina tiempo detenido. -->
        <belief name="tiempoParado" class="int">
            <fact>0</fact>
        </belief>
        
	</beliefs>

	<plans>
		 <!-- Plan default, aumenta el contador del semaforo. -->
        <plan name="contadorPlanNormal">
            <body class="AutoSimpleContadorPlan"/>
        </plan>
       	<!-- Este plan cambia el estado del semaforo segun el numero de segundos transcurridos
         sin trafico ni comunicacion, cambia cada 10 segundos -->
        <plan name="cambiaEstadoNormal">
            <body class="CambiaEstadoNormalPlanCoche"/>
            <trigger>
                <condition>
                    $beliefbase.segundosTrans>0 &amp;&amp; $beliefbase.segundosTrans%10==0
                </condition>
            </trigger>
        </plan>
        <!-- Este plan permite conocer el estado del semaforo -->
		<plan name="peticionEstado">
			<body class="PeticionEstadoPlan"/>
			<trigger>
				<messageevent ref="request_state"/>
			</trigger>
		</plan>
		<!-- Este plan permite conocer el estado de la linea tangente del semaforo, si hay trafico o no -->
		<plan name="peticionGetTangente">
			<body class="PeticionLineaTangentePlan"/>
			<trigger>
				<messageevent ref="request_tangente"/>
			</trigger>
		</plan>
		<!-- Este plan permite conocer el estado de la linea perpendicular del semaforo, si hay trafico o no -->
		<plan name="peticionGetPerpendicular">
			<body class="PeticionLineaPerpendicularPlan"/>
			<trigger>
				<messageevent ref="request_perpendicular"/>
			</trigger>
		</plan>
		<!-- Este plan permite escribir el estado de la linea tangente del semaforo. -->
		<plan name="peticionSetTangente">
			<body class="SetLineaTangentePlan"/>
			<trigger>
				<messageevent ref="set_tangente"/>
			</trigger>
		</plan>

		<plan name="peticionPosicion">
			<body class="PeticionPosicionPlan"/>
			<trigger>
				<messageevent ref="request_pos"/>
			</trigger>
		</plan>
		<plan name="setPosicion">
			<body class="SetPosicionPlan"/>
			<trigger>
				<messageevent ref="set_pos"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- Responde con el estado del agente. -->
		<messageevent name="request_state" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("request state")</match>
		</messageevent>
		<!-- Responde con el estado del agente. -->
		<messageevent name="inform" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
		<!-- Consulta el estado de la linea tangente del agente. -->
		<messageevent name="request_tangente" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("request tangente")</match>
		</messageevent>
		<!-- Consulta el estado de la linea perpendicular del agente. -->
		<messageevent name="request_perpendicular" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("request perpendicular")</match>
		</messageevent>
		<!-- Pone un nuevo valor a la linea tangente del agente. -->
		<messageevent name="set_tangente" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("set tangente")</match>
		</messageevent>
	
	
	
		<!-- Consulta el estado oeste del agente. -->
		<messageevent name="request_pos" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("request posicionC")</match>
		</messageevent>
		
		<messageevent name="set_pos" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("set posicion")</match>
		</messageevent>
	</events>

	<properties>
		<!-- Only log outputs >= level are printed. -->
		<!-- <property name="logging.level">Level.INFO</property> -->
 		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!-- Debugging flag. -->
		<!-- <property name="debugging">true</property> -->
    </properties>
    
    <services>
    	<providedservice class="IPosicionAutoService">
			<implementation class="PosicionAutoService"/>
		</providedservice>
		<providedservice class="ISetPosicionAutos">
			<implementation class="SetPosicionAutosService"/>
		</providedservice>
    	<requiredservice name="estadosDeSemaforos" class="IEstadoSemaforoService" multiple="true" >
    		<binding scope="platform" dynamic="true"/>
    	</requiredservice>
    </services>
    
    <configurations>
		<configuration name="default">
			<plans>
				<initialplan ref="contadorPlanNormal"/>
			</plans>
		</configuration>
 	</configurations>

</agent>

